# -*- coding: utf-8 -*-
"""WMAD_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d61ixdmh02rq97AlwFtsyIzuPWPpkvUx
"""


# app.py (Main Streamlit Application)
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load and prepare the dataset
@st.cache_data
def load_movie_data():
    # Sample movie dataset (you would replace this with a more comprehensive dataset)
    movies_data = {
        'title': [
            'The Shawshank Redemption', 'The Godfather', 'The Dark Knight',
            'Pulp Fiction', 'Forrest Gump', 'Inception', 'The Matrix',
            'Interstellar', 'Goodfellas', 'The Silence of the Lambs'
        ],
        'genre': [
            'Drama', 'Crime', 'Action', 'Crime', 'Drama',
            'Sci-Fi', 'Sci-Fi', 'Sci-Fi', 'Crime', 'Thriller'
        ],
        'description': [
            'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.',
            'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.',
            'When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.',
            'The lives of two mob hitmen, a boxer, a gangster and his wife, and a pair of diner bandits intertwine in four tales of violence and redemption.',
            'The presidencies of Kennedy and Johnson, the Vietnam War, the Watergate scandal and other historical events unfold from the perspective of an Alabama man with an IQ of 75.',
            'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O.',
            'A computer programmer discovers that reality as he knows it is a simulation created by machines, and joins a rebellion to break free.',
            'A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'s survival.',
            'The story of Henry Hill and his life in the mob, covering his relationship with his wife Karen Hill and his mob partners Jimmy Conway and Tommy DeVito in the Italian-American crime syndicate.',
            'A young F.B.I. cadet must receive the help of an incarcerated and manipulative cannibal killer to help catch another serial killer.'
        ]
    }
    return pd.DataFrame(movies_data)

# Create recommendation function
def get_movie_recommendations(movie_title, movies_df):
    # Combine genre and description for better recommendation
    movies_df['content'] = movies_df['genre'] + ' ' + movies_df['description']

    # Create TF-IDF vectorizer
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(movies_df['content'])

    # Compute cosine similarity
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

    # Get the index of the movie that matches the title
    idx = movies_df[movies_df['title'] == movie_title].index[0]

    # Get similarity scores
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort movies based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get top 5 similar movies (excluding the input movie itself)
    top_5_indices = [i[0] for i in sim_scores[1:6]]

    return movies_df['title'].iloc[top_5_indices].tolist()

# Streamlit App Layout
def main():
    st.title('ðŸŽ¬ Movie Recommendation System')

    # Load movie data
    movies_df = load_movie_data()

    # Sidebar for user input
    st.sidebar.header('Movie Recommender')

    # Movie selection dropdown
    selected_movie = st.sidebar.selectbox(
        'Select a Movie',
        movies_df['title'].tolist()
    )

    # Recommendation button
    if st.sidebar.button('Get Recommendations'):
        # Get and display recommendations
        recommendations = get_movie_recommendations(selected_movie, movies_df)

        st.subheader(f'Recommendations Based on "{selected_movie}"')

        # Display recommended movies in columns
        cols = st.columns(len(recommendations))
        for i, movie in enumerate(recommendations):
            with cols[i]:
                st.write(movie)

                # Find movie details
                movie_details = movies_df[movies_df['title'] == movie].iloc[0]
                st.write(f"**Genre:** {movie_details['genre']}")
                st.write(f"**Description:** {movie_details['description'][:100]}...")

    # About section
    st.sidebar.markdown('---')
    st.sidebar.info(
        'This Movie Recommendation System uses TF-IDF and Cosine Similarity '
        'to suggest movies based on content similarity.'
    )

# Run the app
if __name__ == '__main__':
    main()
